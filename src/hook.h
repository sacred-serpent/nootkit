#pragma once

#include <linux/types.h>

#include "common.h"

#define HOOK_DEFINE(module, target_name, target_ptr, hook)                  \
static hook_restore __hook_restore_##target_name = {0};                     \
                                                                            \
void module##_hook_set_##target_name(void) {                                \
    hook_set_and_store(target_ptr, hook, &__hook_restore_##target_name);    \
}                                                                           \
                                                                            \
void module##_hook_unset_##target_name(void) {                              \
    hook_unset_from_restore(target_ptr, &__hook_restore_##target_name);     \
}

#define HOOK_EXTERN(module, target_name)        \
void module##_hook_set_##target_name(void);     \
void module##_hook_unset_##target_name(void);

typedef struct view hook_restore;

/// @brief Replace the first bytes at `addr` with a jmp gadget referring to the 64 bit address `hook`.
/// @details This mechanism leaves the target function unusable outside of jumping
///     to the hook, until the hook is unset.
/// @param addr address to set hook at
/// @param hook address of function to act as a hook
/// @returns hook_restore pointing to a byte array which can be used to unset the hook.
/// @warning The data pointed to by the returned view may change on subsequent hook_set_* calls,
///     so it should be saved externally before any other hooks are set using this method.
hook_restore hook_set(void *addr, void *hook);

/// @brief Restore the replaced bytes at previously hooked `addr`.
/// @param addr address of hooked function to restore bytes at
/// @param restore view struct to saved bytes to restore at `addr`
void hook_unset(void *addr, hook_restore *restore);

/// @brief Set a hook using `hook_set`, storing the restore context in persistent
///     heap space.
/// @attention Use `hook_unset_from_restore` to unset the hook and deallocate the restore context.
/// @param target Function address to hook
/// @param hook Hook function address
/// @param restore Pointer to a view struct which will be updated to point to the persistent
///     restore context.
void hook_set_and_store(void *target, void *hook, hook_restore *restore);

/// @brief Unset a hook set with `hook_set_and_store`.
/// @param target Function address to unset a hook from.
/// @param restore Restore context generated by `hook_set_and_store`. Upon hook unsetting, `restore`
///     will be reset to 0 to allow re-setting the hook.
void hook_unset_from_restore(void *target, hook_restore *restore);
